use ::root::dependency::dragonsurvival::dragon_stage::Modifier
use ::java::data::enchantment::LevelBasedValue
use ::java::data::enchantment::SpawnParticlesEntityEffect
use ::java::data::loot::LootCondition
use ::java::data::advancement::predicate::ItemPredicate
use ::java::server::util::particle::Particle

dispatch minecraft:resource[dragonsurvival:dragon_ability] to struct DragonAbility {
    /// Determines how the ability is activated
    activation: Activation, // FIXME :: using fake registries (dispatcher) to identify the types (unsure if correct)
    /// Defines the max. level of the ability and how to upgrade it
    /// (If no upgrade is defined, the max. level will be 1)
    upgrade?: Upgrade,
    /// Disables the ability if the condition is matched
    usage_blocked?: LootCondition,
    /// Defines what the ability actually does
    actions: Action,
    /// Determines whether the ability can be disabled in the species screen through CTRL+Click
    can_be_manually_disabled: boolean,
    /// Icons for this ability
    icon: LevelBasedResource,
}

struct LevelBasedResource {
    texture_entries: [LevelBasedResourceEntry]
}

struct LevelBasedResourceEntry {
    /// Defined as GUI sprite (i.e. it needs to be in 'textures/gui/sprites' directory)
    /// (The 'textures/gui/sprites' path and file ending '.png' also need to be omitted)
    texture_resource: #[id] string,
    /// Determines which icon is shown at which level
    /// (The entry is used until the next matched 'from_level' or max. level)
    from_level: int @ 0..255
}

// --- Activation --- //

dispatch minecraft:resource[dragonsurvival:activation] to struct Activation {
	type: #[id] ActivationType,
	...dragonsurvival:activation[[type]],
}

enum(string) ActivationType {
    Passive = "passive",
    Channeled = "active_channeled",
    Simple = "active_simple"
}

dispatch dragonsurvival:activation[passive] to struct PassiveActivation {
    /// Mana cost while this ability is active
    continuous_mana_cost?: ManaCost
}

dispatch dragonsurvival:activation[active_channeled] to struct ChanneledActivation {
    /// Mana cost (consumed when the cast time is completed)
    initial_mana_cost?: LevelBasedValue,
    /// Mana cost while this ability is being casted
    continuous_mana_cost?: ManaCost,
    /// Charge-up time to cast the ability
    cast_time?: LevelBasedValue,
    /// Cooldown that gets applied once the cast has finished
    cooldown?: LevelBasedValue,
    /// Whether the caster can move while casting the ability (default: true)
    can_move_while_casting?: boolean,
    sound?: Sound,
    animations?: Animations
}

dispatch dragonsurvival:activation[active_simple] to struct SimpleActivation {
    /// Mana cost (consumed when the cast time is completed)
    initial_mana_cost?: LevelBasedValue,
    /// Charge-up time to cast the ability
    cast_time?: LevelBasedValue,
    /// Cooldown that gets applied once the cast has finished
    cooldown?: LevelBasedValue,
    /// Whether the caster can move while casting the ability (default: true)
    can_move_while_casting?: boolean,
    sound?: Sound,
    animations?: Animations
}

struct ManaCost {
    type: ManaCostType,
    amount: LevelBasedValue
}

enum(string) ManaCostType {
    Ticking = "ticking",
    Reserved = "reserved"
}

struct Sound {
    start?: #[id="sound_event"] string,
    charging?: #[id="sound_event"] string,
    looping?: #[id="sound_event"] string,
    end?: #[id="sound_event"] string
}

struct Animations {
    start_and_charging?: (
        CompoundAbilityAnimation |
        SimpleAbilityAnimation |
    ),
    looping?: SimpleAbilityAnimation,
    end?: SimpleAbilityAnimation
}

struct CompoundAbilityAnimation {
    starting_animation_key: string,
    looping_animation_key: string,
    layer: AnimationLayer,
    /// (default: 0)
    transition_length?: int @ 1,
    locks_neck: boolean,
    locks_tail: boolean
}

struct SimpleAbilityAnimation {
    animation_key: string,
    layer: AnimationLayer,
    /// (default: 0)
    transition_length?: int @ 1,
    locks_neck: boolean,
    locks_tail: boolean
}

enum(string) AnimationLayer {
    Base = "BASE",
    Breath = "BREATH",
    Bite = "BITE"
}

// --- Upgrade Types --- //

dispatch minecraft:resource[dragonsurvival:upgrade_type] to struct Upgrade {
	upgrade_type: #[id] UpgradeType,
	...dragonsurvival:upgrade_type[[upgrade_type]],
}

enum(string) UpgradeType {
    ExperiencePoints = "dragonsurvival:experience_points",
    ExperienceLevel = "dragonsurvival:experience_levels",
    DragonSize = "dragonsurvival:dragon_size",
    Item = "dragonsurvival:item_based",
    Condition = "dragonsurvival:condition_based"
}

dispatch dragonsurvival:upgrade_type[dragonsurvival:experience_points] to struct ExperiencePointsUpgrade {
    maximum_level: int @ 0..255,
    /// Upgrade cost in experience points
    experience_cost: LevelBasedValue
}

dispatch dragonsurvival:upgrade_type[dragonsurvival:experience_levels] to struct ExperienceLevelUpgrade {
    maximum_level: int @ 0..255,
    /// Experience level required to unlock the level
    level_requirement: LevelBasedValue
}

dispatch dragonsurvival:upgrade_type[dragonsurvival:dragon_size] to struct DragonSizeUpgrade {
    maximum_level: int @ 0..255,
    /// Dragon size required to unlock the level
    size_requirement: LevelBasedValue
}

dispatch dragonsurvival:upgrade_type[dragonsurvival:item_based] to struct ItemUpgrade {
    /// Valid items per level (to unlock said level)
    items_per_level: [(
        #[id(registry="item", tags="allowed")] string |
        [#[id="item"] string] |
    )],
    /// Items that can be used to downgrade the level
    downgrade_items: (
        #[id(registry="item", tags="allowed")] string |
        [#[id="item"] string] |
    )
}

dispatch dragonsurvival:upgrade_type[dragonsurvival:condition_based] to struct ConditionUpgrade {
    /// Conditions to unlock the next level
    conditions: [LootCondition],
    /// If enabled the next upgrade will only unlock if the previous conditions matches as well
    /// If disabled the highest level whose condition matches determines the level
    require_previous: boolean
}

// --- Activation --- //

struct Action {
    /// Defines how the target is selected and also contains the definition for the effects
    target_selection: Targeting,
    /// How often the effects are triggered (current_tick % rate == 0)
    trigger_rate: LevelBasedValue
}

dispatch minecraft:resource[dragonsurvival:targeting] to struct Targeting {
    target_type: #[id] TargetingType,
    ...dragonsurvival:targeting[[target_type]],
}

// --- Targeting --- //

enum(string) TargetingType {
    /// Targets in an x by x area around the caster
    Area = "dragonsurvival:area",
    /// Targets in a cone in front of the caster
    Dragon_Breath = "dragonsurvival:dragon_breath",
    /// Targets a specific entity or block the caster is looking at
    Looking_At = "dragonsurvival:looking_at",
    /// Targets the caster
    Self = "dragonsurvival:self",
    /// Targets a cylindrical area around the player
    Disc = "dragonsurvival:disc"
}

dispatch dragonsurvival:targeting[dragonsurvival:area] to struct AreaTarget {
    applied_effects: (
        BlockTargeting |
        EntityTargeting |
    ),
    radius: LevelBasedValue
}

dispatch dragonsurvival:targeting[dragonsurvival:dragon_breath] to struct DragonBreathTarget {
    applied_effects: (
        BlockTargeting |
        EntityTargeting |
    ),
    /// The default range is based on the scale of the caster
    range_multiplier: LevelBasedValue
}

dispatch dragonsurvival:targeting[dragonsurvival:looking_at] to struct LookingAtTarget {
    applied_effects: (
        BlockTargeting |
        EntityTargeting |
    ),
    range: LevelBasedValue
}

dispatch dragonsurvival:targeting[dragonsurvival:self] to struct SelfTarget {
    applied_effects: (
        BlockTargeting |
        EntityTargeting |
    )
}

dispatch dragonsurvival:targeting[dragonsurvival:disc] to struct DiscTarget {
    applied_effects: (
        BlockTargeting |
        EntityTargeting |
    ),
    radius: LevelBasedValue,
    height: LevelBasedValue,
    /// If enabled the start height of the disc will be shifted 1 position lower (default: false)
    /// (Useful in case the ground the caster is walking on is supposed to be the target)
    height_starts_below
}

// --- Ability Entity Effects --- //

struct EntityTargeting {
    entity_effect: EntityEffect,
    /// Determines which entities are selected as target - available loot context:
    /// - attacking_entity (caster)
    /// - this_entity (target)
    /// - tool (mainhand of the target)
    /// - offhand / head / chest / legs / feet (equipment slots from the target)
    /// - origin (position of the target)
    target_conditions?: LootCondition,
    /// A pre-filter for the entities to select
    /// (Has context between caster and the target, allowing for proper ally or enemy checks)
    targeting_mode: TargetingMode
}

dispatch minecraft:resource[dragonsurvival:ability_entity_effects] to struct EntityEffect {
    // FIXME :: 'effect_type: #[id="dragonsurvival:ability_entity_effects"] string,' does not suggest any types when clicking the field
    effect_type: #[id] EntityEffectType,
    ...dragonsurvival:ability_entity_effects[[effect_type]],
}

enum(string) EntityEffectType {
    Damage = "dragonsurvival:damage",
    Modifier = "dragonsurvival:modifier",
    Potion = "dragonsurvival:potion",
    Projectile = "dragonsurvival:projectile",
    Summon_Entity = "dragonsurvival:summon_entity",
    Damage_Modification = "dragonsurvival:damage_modification",
    Breath_Particles = "dragonsurvival:breath_particles",
    Ignite = "dragonsurvival:ignite",
    Harvest_Bonus = "dragonsurvival:harvest_bonus",
    On_Attack = "dragonsurvival:on_attack",
    Flight = "dragonsurvival:flight",
    Spin = "dragonsurvival:spin",
    Item_Conversion = "dragonsurvival:item_conversion",
    Swim = "dragonsurvival:swim",
    Effect_Modification = "dragonsurvival:effect_modification",
    Particle = "dragonsurvival:particle",
    Glow = "dragonsurvival:glow",
    Oxygen_Bonus = "dragonsurvival:oxygen_bonus",
    Block_Vision = "dragonsurvival:block_vision",
    Run_Function = "dragonsurvival:run_function"
}

enum(string) TargetingMode {
    /// Can target anything except the caster
    All = "all",
    /// Only targets entities that are considered as ally
    Allies = "allies",
    /// Same as 'Allies' but also includes the caster
    Allies_And_Self = "allies_and_self",
    /// Targets any non-ally
    Non_Allies = "non_allies",
    /// Targets neutral entities (non-ally and non-enemy)
    Neutral = "neutral",
    /// Targets entities considered as enemy, which may be:
    /// - Categorized as monster
    /// - Mobs targeting the caster
    Enemies = "enemies"
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:damage] to struct DamageEffect {
    type: #[id="damage_type"] string,
    amount: LevelBasedValue
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:modifier] to struct ModifierEffect {
    base: DurationInstanceBase,
    modifiers: [Modifier]
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:potion] to struct PotionEffect {
    potion: PotionData
}

struct PotionData {
    effects: (
        #[id(registry="mob_effect", tags="allowed")] string |
        [#[id="mob_effect"] string] |
    ),
    amplifier: LevelBasedValue,
    duration: LevelBasedValue,
    /// (default: 1 (100%))
    probability: LevelBasedValue,
    /// (default: false)
    effect_particles: boolean,
    /// (default: true)
    show_icon: boolean
}

// ----- # ----- //

// TODO
dispatch dragonsurvival:ability_entity_effects[dragonsurvival:projectile] to struct ProjectileEffect { }

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:summon_entity] to struct SummonEntityEffect {
    base: DurationInstanceBase,
    /// The weighted list allows for custom weights
    /// Otherwise each entity will have the same weight (therefor chance)
    entities: (
        [WeightedListEntry] |
        #[id(registry="entity_type", tags="allowed")] string |
        [#[id="entity_type"] string] |
    ),
    /// Max. amount of entities that will be summoned per instance
    max_summons: LevelBasedValue,
    attribute_scales?: [AttributeScale],
    /// If enabled the entity will be owned by the summoner and be considered an ally (default: true)
    /// (It also means that the attack and movement behaviour can be changed through the related keybind)
    is_allied?: boolean
}

struct WeightedListEntry {
    data: #[id="entity_type"] string,
    weight: int @ 0..
}

struct AttributeScale {
    attributes: (
        #[id(registry="attribute", tags="allowed")] string |
        [#[id="attribute"] string] |
    ),
    scale: LevelBasedValue
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:damage_modification] to struct DamageModificationEffect {
    modifications: [DamageModification]
}

struct DamageModification {
    base: DurationInstanceBase,
    damage_types: (
        #[id(registry="damage_type", tags="allowed")] string |
        [#[id="damage_type"] string] |
    ),
    /// The value '0' indicates that the target will be immune to this damage
    multiplier: LevelBasedValue
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:breath_particles] to struct BreathParticlesEffect {
    spread: float,
    speed_per_size: float,
    main_particle: Particle,
    secondary_particle: Particle
}

// TODO :: add dragon survival particle types here
// dispatch minecraft:particle[dragonsurvival:abc] to struct SomeParticle { }

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:ignite] to struct IgniteEffect {
    ignite_ticks: LevelBasedValue
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:harvest_bonus] to struct HarvestBonusEffect {
    harvest_bonuses: [HarvestBonus]
}

struct HarvestBonus {
    base: DurationInstanceBase,
    /// Blocks these bonuses apply to
    blocks: (
        #[id(registry="block", tags="allowed")] string |
        [#[id="block"] string] |
    ),
    /// Determines the min. break speed
    base_speed?: LevelBasedTier,
    /// The base harvest level to be compared are determined by:
    /// - Block: Tag they belong to (e.g. 'minecraft:needs_stone_tool')
    /// - Item: Tier (if present) (e.g. 'Tiers#IRON')
    /// This value is then added to said value to determine if the block can now be broken
    harvest_bonus?: LevelBasedValue,
    break_speed_multiplier?: LevelBasedValue
}

struct LevelBasedTier {
    tiers: [LevelBasedTierEntry]
}

struct LevelBasedTierEntry {
    tier: Tier,
    /// Determines which tier is used at which level
    /// (The entry is used until the next matched 'from_level' or max. level)
    from_level: int @ 0..255
}

enum(string) Tier {
    Wood = "WOOD",
    Stone = "STONE",
    Iron = "IRON",
    Diamond = "DIAMOND",
    Gold = "GOLD",
    Netherite = "NETHERITE"
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:on_attack] to struct OnAttackEffect {
    potion: PotionData
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:flight] to struct FlightEffect {
    level_requirement: int @ 0..255,
    /// Custom flight icon (default: dragonsurvival:textures/ability_effect/generic_icons/dragon_wings.png)
    icon?: #[id] string
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:spin] to struct SpinEffect {
    level_requirement: int @ 0..255,
    /// Fluids the spin effect can be used in
    /// (If none are specified it can only be used while in the air)
    fluid_types?: (
        #[id(registry="neoforge:fluid_type", tags="allowed")] string |
        [#[id="neoforge:fluid_type"] string] |
    )
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:item_conversion] to struct ItemConversionEffect {
    item_conversions: [ItemConversionData],
    /// A value between 0 (0%) and 1 (100%)
    probability: LevelBasedValue
}

struct ItemConversionData {
    /// Determines which items will be converted
    item_predicate: ItemPredicate,
    /// A weighted list of items to be converted into
    items_to: [ItemTo]
}

struct ItemTo {
    item: #[id="item"] string,
    weight: int @ 0..
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:swim] to struct SwimEffect {
    /// The time (in ticks) the entity can breathe when submerged in the fluid
    /// (A value of '-1' means unlimited oxygen)
    max_oxygen: LevelBasedValue,
    /// The fluid type the entity can swim in
    fluid_type: #[id="neoforge:fluid_type] string
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:effect_modification] to struct EffectModificationEffect {
    modifications: [EffectModification]
}

struct EffectModification {
    base: DurationInstanceBase,
    effects?: (
        #[id(registry="mob_effect", tags="allowed")] string |
        [#[id="mob_effect"] string] |
    ),
    duration_modification: Modifier,
    amplifier_modification: Modifier
}

struct Modification {
    type: ModificationType,
    amount: LevelBasedValue
}

enum(string) ModificationType {
    Additive = "additive",
    Multiplicative = "multiplicative"
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:particle] to struct ParticleEffect {
    particle_data: SpawnParticlesEntityEffect, // We have a custom object but the CODEC looks the same
    particle_count: LevelBasedValue
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:glow] to struct GlowEffect {
    glows: [Glow]
}

struct Glow {
    base: DurationInstanceBase,
    color: (
        #[color="hex_rgb"] string |
        #[color="named"] TextColor |
    )
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:oxygen_bonus] to struct OxygenBonusEffect {
    bonuses: [OxygenBonus]
}

struct OxygenBonus {
    base: DurationInstanceBase,
    /// The fluid types the oxygen bonus applies to
    /// (The bonus will apply to all fluids if not specified)
    fluid_types?: (
        #[id(registry="neoforge:fluid_type", tags="allowed")] string |
        [#[id="neoforge:fluid_type"] string] |
    ),
    oxygen_bonus: LevelBasedValue
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:block_vision] to struct BlockVisionEffect {
    block_visions: [BlockVision]
}

struct BlockVision {
    base: DurationInstanceBase,
    /// The fluid types the oxygen bonus applies to
    /// (The bonus will apply to all fluids if not specified)
    blocks?: (
        #[id(registry="block", tags="allowed")] string |
        [#[id="block"] string] |
    ),
    range: LevelBasedValue,
    /// Determines how the blocks are marked
    /// - Outline: Outlines the block and can be seen through other blocks
    /// - Particles: Creates particles around the block
    display_type: DisplayType,
    /// Color to be used - if multiple are specified it will shift through them
    color: [(
        #[color="hex_rgb"] string |
        #[color="named"] TextColor |
    )]
}

enum(string) DisplayType {
    Outline = "outline",
    Particles = "particles"
}

// ----- # ----- //

dispatch dragonsurvival:ability_entity_effects[dragonsurvival:run_function] to struct RunFunctionEffect {
    /// The minecraft function
    function: #[id] string
}

// ----- # ----- //

struct DurationInstanceBase {
    /// Unique id for the instance to be created
    id: #[id] string,
    duration: LevelBasedValue,
    /// If enabled the created instances will be removed when (default: false):
    /// - The ability of the caster is no longer active (applies to all instances)
    /// - The target conditions for the ability no longer match (only applies to instances of the caster)
    should_remove_automatically?: boolean,
    /// Condition which causes the instances to be removed when matched
    early_removal_condition?: LootCondition,
    /// If no custom icon is provided the ability / penalty icon will be used instead
    custom_icon?: #[id] string,
    /// If enabled the instance won't be shown as effect (default: false)
    is_hidden?: boolean
}

// --- Ability Block Effects --- //

struct BlockTargeting {
    block_effect: BlockEffect,
    /// Determines which blocks are selected as target - available loot context:
    /// - this_entity (caster)
    /// - tool (mainhand of the caster)
    /// - offhand / head / chest / legs / feet (equipment slots from the caster)
    /// - block_state (of the targeted position)
    /// - origin (the targeted position)
    /// - block_entity (of the targeted position) (Optional)
    target_conditions?: LootCondition
}

dispatch minecraft:resource[dragonsurvival:ability_block_effects] to struct BlockEffect {
    effect_type: #[id] BlockEffectType,
    ...dragonsurvival:ability_block_effects[[effect_type]],
}

enum(string) BlockEffectType {
    Bonemeal = "dragonsurvival:bonemeal",
    Conversion = "dragonsurvival:conversion",
    Summon_Entity = "dragonsurvival:summon_entity",
    Fire = "dragonsurvival:fire",
    Area_Cloud = "dragonsurvival:area_cloud",
    Block_Break = "dragonsurvival:block_break",
    Particle = "dragonsurvival:particle",
    Run_Function = "dragonsurvival:run_function"
}